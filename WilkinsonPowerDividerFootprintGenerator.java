// WilkinsonPowerDividerFootprintGenerator.java v1.0
// Copyright (C) 2015 Erich S. Heinzle, a1039181@gmail.com

//    see LICENSE-gpl-v2.txt for software license
//    see README.txt
//    
//    This program is free software; you can redistribute it and/or
//    modify it under the terms of the GNU General Public License
//    as published by the Free Software Foundation; either version 2
//    of the License, or (at your option) any later version.
//    
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//    
//    You should have received a copy of the GNU General Public License
//    along with this program if not, write to the Free Software
//    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//    
//    WilkinsonPowerDividerFootprintGenerator.java
//    Copyright (C) 2015 Erich S. Heinzle a1039181@gmail.com



import java.lang.Math;
import java.io.*;
import java.util.Locale;
import java.text.*;

public class WilkinsonPowerDividerFootprintGenerator
{

	public static void main(String[] args) throws IOException
	{

		// this should prevent continental locales from encountering commas
		// as decimal points in the mm dimensions generated by the utility
		Locale.setDefault(new Locale("en", "US"));

		long innerDiameter = 27100; // microns
                long outerDiameter = 32000; // microns
                long segmentLength = 1000; // 1mm length in microns
                int turnsTotal = 1;
                long trackWidth = 220; // microns
                        // (((outerDiameter-innerDiameter)/2-(turnsTotal-1)*trackGap))/turnsTotal;

                boolean theOneTrueEDAsuiteGEDA = true;
                	// obviously, !theOneTrueEDAsuiteGEDA = kicad :-)

		int vertices = 0;

		// we now parse arguments parsed via the command line

		double frequencyMhz = 1000;
		long resistorGap = 1000;    // microns

		if (args.length == 0)
		{
			printUsage();
			System.exit(0);
		}

		for (int counter = 0; counter < args.length; counter++)
		{
			if (args[counter].startsWith("-f"))
			{
				frequencyMhz = Integer.parseInt(args[counter+1]);
				counter++;
			}
                        else if (args[counter].startsWith("-r"))
                        {
                                resistorGap = Long.parseLong(args[counter+1]);
                                counter++;
                        }
                        else if (args[counter].startsWith("-l"))
                        {
                                segmentLength = Long.parseLong(args[counter+1]);
                                counter++;
                        }
                        else if (args[counter].startsWith("-w"))
                        {
                                trackWidth = Long.parseLong(args[counter+1]);
                                counter++;
                        }
                        else if (args[counter].startsWith("-k"))
                        {
                                theOneTrueEDAsuiteGEDA = false;
                        }
                        else 
                        {
                                printUsage();
				System.exit(0);
                        }
			
		}

		// some basic preliminaries for all scenarios

		long speedOfLight = 299792458; // metres per second

		double wavelength = speedOfLight/(frequencyMhz); // v = f.lambda
				// by dividing m/s by a frequency in MHz, we get microns
				// this may need tweaking for electrical length 

		double quarterWave = wavelength/4; // in microns

                // we figure out the circumference in microns, well close enough
                long circumference = (long)((quarterWave * 2) + resistorGap);

                double startRadius = (circumference/Math.PI)/2.0;

		double nextRadius = startRadius;

		// now some preliminaries for the power divider loop
                // we now sort out an appropriate start theta and end theta,
		// amd then appropriate angular step sizes for the loop

                double startTheta = Math.asin(((trackWidth + resistorGap)/2.0)/startRadius);
		double endTheta = (Math.PI*2.0) - startTheta;
                double nextTheta = 0;

		// we base segments per loop on the loop circumference
		double segmentsPerLoop = (circumference - resistorGap)/segmentLength;
		// we figure out a step size in radians to step around the loop
                // which is 2pi radians divided by number of segments
		double deltaTheta = (2.0 * (Math.PI - startTheta))/segmentsPerLoop;

		// we now define some flags
		boolean finishedLoop = false;

                // none of the above prelimiaries are needed for n-gons

		// we use x1,y1,x2,y2 as variables for the begining and end coords of line segments
		double x1 = 0;
		double y1 = 0;
		double x2 = 0;
		double y2 = 0;

		long layerNumber = 15; // front for kicad

		String moduleName = frequencyMhz + "MHz_wilkinson_power_divider";

		String outputFileName = "";
	
		if (theOneTrueEDAsuiteGEDA)
		{
			outputFileName = moduleName + ".fp";
		}
		else //kicad
		{
			outputFileName = moduleName + ".mod";
		}

		System.out.println("Generating " + frequencyMhz + " MHz wilkinson power divider:" +
			outputFileName);

		System.out.println("Using track width of: " + trackWidth + " microns.");

		File outputFile = new File(outputFileName);

		PrintWriter footprintOutput = new PrintWriter(outputFile);

		String headerString = "";

		if (theOneTrueEDAsuiteGEDA)
		{
			headerString = headerString +
				("Element[\"\" \"Inductor\"" + 
				" \"\" \"\" 0 0 -1000 -1000 0 100 \"\"]" +
				"(\n");
		}
		else // kicad :-)
		{
                	headerString = headerString +
				"PCBNEW-LibModule-V1  mer 27 mar 2013 20:53:24 CET\n" +
                                "Units mm\n" +
                                "$INDEX\n" +
                                moduleName + "\n" +
                                "$EndINDEX\n" +
                                "$MODULE " + moduleName + "\n" +
                                "Po 0 0 0 15 51534DFF 00000000 ~~\n" +
                                "Li " + moduleName + "\n" +
                                "Cd " + moduleName + "\n" +
                                "Sc 0\n" +
                                "AR\n" +
                                "Op 0 0 0\n" +
                                "T0 0 -4134 600 600 0 120 N V 21 N \"S***\"\n";
		}

		footprintOutput.print(headerString);

                long currentLoopStartX = 0;
                long currentLoopStartY = 0;

                double trackWidthMM = trackWidth/1000.0;

		// and length of trace will allow coil resistance to be calculated
		double cumulativeCoilLengthMM = 0.0;

		double theta = startTheta;

		while (theta < endTheta)
		{
			nextTheta = theta + deltaTheta;	
			nextRadius = startRadius;//  + radiusIncrementPerSegment;
			// we figure out the coordinates in mm as double variables 
			// gEDA will recognise "XXX.XXmm" as mm
			x1 = ((startRadius * Math.cos(theta))/1000.0);
			y1 = ((startRadius * Math.sin(theta))/1000.0);
                        x2 = ((nextRadius * Math.cos(nextTheta))/1000.0);
                        y2 = ((nextRadius * Math.sin(nextTheta))/1000.0);

                        // we add the segment length to the total coil length 
                        cumulativeCoilLengthMM += calculateSegmentLength(x1, y1, x2, y2);

			// for gEDA we have to produce a pad description of the form
			// Pad[X1 Y1 X2 Y2 Thickness Clearance Mask Name Number SFlags]

                                // for kicad we have to produce
                                // a Draw Segment "DS" string of the form
                                // "DS x1 y1 x2 y2 thickness layer"

			if (theOneTrueEDAsuiteGEDA)
			{
				footprintOutput.print(generateGEDApad(x1, y1, x2, y2, trackWidthMM));
			}
			else // kicad
			{
                                footprintOutput.print(generateKicadPad(x1, y1, x2, y2, trackWidthMM, layerNumber));
				// footprintOutput.format("DS %.3f %.3f %.3f %.3f", x1, y1, x2, y2);
				// footprintOutput.format(" %.3f ", trackWidthMM);
				// footprintOutput.println(layerNumber);
			}
			theta = nextTheta;
		}

		// we now create the input and output ports and then finish off the footprint

                x1 = ((startRadius * Math.cos(theta))/1000.0);
                y1 = ((startRadius * Math.sin(theta))/1000.0);

		if (theOneTrueEDAsuiteGEDA) // :-)
		{
			footprintOutput.print(generateGEDApad(x1, y1, (x1+3.0) , y1, trackWidthMM));
			footprintOutput.print(generateGEDApad(x1, -y1, (x1+3.0), -y1, trackWidthMM));
			footprintOutput.print(generateGEDApad((-startRadius/1000)-3, 0, (-startRadius/1000), 0, trackWidthMM));
			footprintOutput.println(")");
		}
		else // kicad
		{
                        footprintOutput.print(generateKicadPad(x1, y1, (x1+3.0), y1, trackWidthMM, layerNumber));
                        footprintOutput.print(generateKicadPad(x1, -y1, (x1+3.0), -y1, trackWidthMM, layerNumber));
                        footprintOutput.print(generateKicadPad((-startRadius/1000)-3, 0, (-startRadius/1000), 0, trackWidthMM, layerNumber));
                	footprintOutput.println("$EndMODULE " + moduleName);
		}

		System.out.print("Total length of power divider arms (mm): ");
		System.out.format("%.4f\n", cumulativeCoilLengthMM);
		System.out.print("DC resistance of arms assuming copper resistivity = 1.75E-8 ohm.m\n\t35.56 micron copper thickness: ");
		System.out.format("%.4f ohm\n", (1.75E-8*(cumulativeCoilLengthMM/1000.0)/((trackWidthMM/1000.0)*(3.556E-5))));
                System.out.print("\t71.12 micron copper thickness: ");
                System.out.format("%.4f ohm\n", (1.75E-8*(cumulativeCoilLengthMM/1000.0)/((trackWidthMM/1000.0)*(7.112E-5))));

		// and we close the footprint file before finishing up
		footprintOutput.close();
	}

	private static String generateGEDApad(double X1, double Y1, double X2, double Y2, double trackWidthMM)
	{
		DecimalFormat myFormat = new DecimalFormat("#####.###");
		String assembledPad = "Pad[" +
			myFormat.format(X1) + "mm " +
			myFormat.format(Y1) + "mm " +
			myFormat.format(X2) + "mm " +
			myFormat.format(Y2) + "mm " +
                	myFormat.format(trackWidthMM) + "mm " + 
			"0.254mm " + 	// the clearance is 10mil
                	"0 " + 		// solder mask clearance is zero
                	"\"A\" " + 	// name of coil
                	"\"1\" " + 	// coil pad number
                	"\"\"]\n"; 	// name of coil
		return assembledPad;
	}

	private static String generateKicadPad(double X1, double Y1, double X2, double Y2, double trackWidthMM, long layerID)
        {
                DecimalFormat myFormat = new DecimalFormat("#####.###");
		String assembledPad = "DS " +
			myFormat.format(X1) + " " +
			myFormat.format(Y1) + " " +
			myFormat.format(X2) + " " +
			myFormat.format(Y2) + " " +
			myFormat.format(trackWidthMM) + " " +
			layerID + "\n";
                // for kicad we have to produce
                // a Draw Segment "DS" string of the form
                // "DS x1 y1 x2 y2 thickness layer"
		return assembledPad;
	}


	private static double calculateSegmentLength(double xOne, double yOne, double xTwo, double yTwo)
	{
		double lengthSquared = ((xOne - xTwo) * (xOne - xTwo))+((yOne - yTwo) * (yOne - yTwo));
		return Math.sqrt(lengthSquared);
	}

	private static void printUsage()
	{
		System.out.println("\nUsage:\n\n\t" +
			"java WilkinsonPowerDivderFootprintGenerator -option value\n" +
			"\n\t\t-k\texport a kicad module, default is geda .fp file\n" +
                        "\n\t\t-r long\t length of resistor gap in microns\n" +
                        "\n\t\t-f long\t frequency of operation in Megahertz\n" +
                        "\n\t\t-w long\t track width in microns\n" +
			"\n\t\t-l long\t length of segment used to approximate circular arc in microns\n" +
			"\n\t\t-h\t prints this\n\n" +
			"Example usage:\n\n\t" +
			"java WilkinsonPowerDividerFootprintGenerator -r 2000 -f 1800 -w 3000 -l 2000 -k\n\t" +
			"generates a wilkinson power divider with two arms\n\t" +
			"lambda/4 in length, separated by a resistor gap\n\t" +
			"of 2000 microns, track width of 3000 microns, and\n\t" +
			"using segment lengths of 2000 microns to create the\n\t" +
			"arcs in a kicad module.\n");
	}
}
